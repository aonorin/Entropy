// Postfilter that shows the depth and specular channel
compositor AsciiComp
{
        technique
        {
                //Reference the main Gbuffer texture
                //texture_ref mrt_output DeferredShading/GBuffer mrt_output
               texture sceneTex target_width target_height PF_R8G8B8A8
		texture asciiTex target_width target_height PF_R8G8B8A8
		texture rt0 target_width_scaled 1 target_height_scaled 1 PF_R8G8B8
        	texture rt1 target_width_scaled 1 target_height_scaled 1 PF_R8G8B8
            	target sceneTex
            	{
                	input previous
            	}
		target asciiTex
            	{
            		input none
                        pass render_quad
                        {
                                material PreAscii
                                input 0 sceneTex
                        }
            	}
            	target asciiTex
            	{
            		input none
                        pass render_quad
                        {
                                material Ascii
                                input 0 sceneTex
                        }
            	}
		target rt1
            	{
                        input none
                        pass render_quad
                        {
                                material BlurV
                                input 0 asciiTex
                        }
            	}
		target rt0
            	{
                        input none
                        pass render_quad
                        {
                                material BlurH
                                input 0 rt1
                        }
            	}
		target rt1
            	{
                        input none
                        pass render_quad
                        {
                                material BlurV
                                input 0 rt0
                        }
            	}
		target rt0
            	{
                        input none
                        pass render_quad
                        {
                                material BlurH
                                input 0 rt1
                        }
            	}
		target rt1
            	{
                        input none
                        pass render_quad
                        {
                                material BlurV
                                input 0 rt0
                        }
            	}
		target rt0
            	{
                        input none
                        pass render_quad
                        {
                                material BlurH
                                input 0 rt1
                        }
            	}
		target_output
        	{
            		input none
            		pass render_quad
            		{
                		material BlurGlow
                		input 0 asciiTex
                		input 1 rt0
            		}
        	}
        }
}

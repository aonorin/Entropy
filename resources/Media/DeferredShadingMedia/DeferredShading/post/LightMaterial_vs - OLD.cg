/******************************************************************************
Copyright (c) W.J. van der Laan

Permission is hereby granted, free of charge, to any person obtaining a copy of 
this software  and associated documentation files (the "Software"), to deal in 
the Software without restriction, including without limitation the rights to use, 
copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
Software, and to permit persons to whom the Software is furnished to do so, subject 
to the following conditions:

The above copyright notice and this permission notice shall be included in all copies 
or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT 
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION 
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE 
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
******************************************************************************/
/** Deferred shading framework
    // W.J. :wumpus: van der Laan 2005 //

    Post shader: Light geometry material
*/

void main(
        float4 Pos: POSITION,
        float3 normal: NORMAL,
        float4 tangent: TANGENT,

        out float4 oPos: POSITION,
        out float4 oTexCoord : TEXCOORD0,
        out float4 tsPosition : TEXCOORD2,
        out float4 tsLightSource : TEXCOORD3,
        out float4 vNormal : TEXCOORD4,
        out float4 vTangent : TEXCOORD5,
        out float4 vBinormal : TEXCOORD6,
        out float4 vPosition : TEXCOORD7,
        out float4 tsCameraPosition :  FOGC,

        //#if LIGHT_TYPE != LIGHT_POINT
        uniform float3 lightPos,
        //#endif
        uniform float4x4 worldViewProj,
        uniform float3 eyePosition
        )
{
    //test = 4.0;
    float4 projPos = mul(worldViewProj, Pos);
    oTexCoord = projPos;

    oPos = projPos;
    vPosition = Pos;
    // Find & normalize the plane's normal, tangent, and binormal vectors
    vNormal.xyz = normalize( normal );
    vTangent.xyz = normalize( tangent.xyz );
    vBinormal.xyz = normalize( cross( vNormal.xyz, vTangent.xyz ) * tangent.w );

    // Convert vertice, camera, and light vector positions into tangent space
    float3x3 tbnMatrix = float3x3(vTangent.xyz,vBinormal.xyz,vNormal.xyz);
    tsPosition.xyz = mul(Pos.xyz,tbnMatrix);
    tsCameraPosition.xyz = mul(eyePosition.xyz,tbnMatrix);
    tsLightSource.xyz = mul(lightPos,tbnMatrix);

    // projPos is now in nonhomogeneous 2d space -- this makes sure no perspective interpolation is
    // done that could mess with our concept.
    //projPos = projPos/projPos.w;
    //oRay = float3(projPos.x, projPos.y * flip, 1) * farCorner;


    // -1 is because generally +Y is down for textures but up for the screen
    //float2 uv = float2(projPos.x, projPos.y * -1) * 0.5 + 0.5;

    // Texture coordinate magic, this compensates for jitter
    //float2 texCoord = float2(projPos[0]/2+0.5, -projPos[1]/2+0.5);
    //oTexCoord = fixUV(uv, float2(vpWidth, vpHeight));
}
